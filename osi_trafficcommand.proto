syntax = "proto2";

option optimize_for = SPEED;

import "osi_version.proto";
import "osi_common.proto";

package osi3;

//
// \brief The traffic command message is provided by the scenario
// engine to traffic participant models to provide control commands
// to them based on the scenario.
//
// \note This interface is currently just a placeholder, and will be
// changed in experimental ways to support basic scenario execution.
// In the future this interface shall be aligned with the level of
// atomic actions as described in OpenSCENARIO 1.0 or later.
//
message TrafficCommand
{
    // The interface version used by the sender (scenario engine).
    //
    optional InterfaceVersion version = 1;

    // The data timestamp of the simulation environment. Zero time is arbitrary
    // but must be identical for all messages. Zero time does not need to
    // coincide with the UNIX epoch. Recommended is the starting time point of
    // the simulation.
    //
    // \note For traffic command data the timestamp coincides both with
    // the notional simulation time the data applies to and the time it was sent
    // (there is no inherent latency for traffic command data, as opposed
    // to sensor data).
    //
    optional Timestamp timestamp = 2;

    // The ID of this traffic participant.
    //
    optional Identifier traffic_participant_id = 3;

    // Commanded Traffic Action(s) if any
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    // \note If more than one action is being supplied in one command message
    // all actions are executed in parallel.
    //
    repeated TrafficAction action = 4;

}

//
// \brief Atomic Traffic Actions to be performed
//
// The actual commands being transmitted are the atomic traffic actions
// described by this message.
//
// \note This message is notionally a choice selection, i.e. only one
// of the multiple optional fields in it must be set at any time.
// It is not defined as a one of field, since this is not currently
// used in OSI message definitions for portability reasons.  From
// an API point of view this results in the same generated interface,
// but without the better enforcement of the restriction on the wire.
//
message TrafficAction
{
    // A TrajectoryAction
    //
    optional TrajectoryAction trajectory_action = 1;

    // A PathAction
    //
    optional PathAction path_action = 2;

    // An AcquireGlobalPositionAction
    //
    optional AcquireGlobalPositionAction acquire_global_position_action = 3;
	
    // A LaneChangeAction
    //
    optional LaneChangeAction lane_change_action = 4; 
}

//
// \brief The StatePoint definition
//
// \note The StatePoint definition does not define mandatory fields.
// The context defines how and what fields are used.
// For example: Path only used xyz of the StatePoint, trajectory also timestamp...
//
message StatePoint
{
    // The timestamp of a StatePoint
    //
    // \note Zero time point does not need to coincide with the UNIX epoch.
    //
    optional Timestamp timestamp = 1;

    // Position in the global coordinate system.
    //
    // The position refers to the center (x,y,z) of the bounding box.
    //
    // \note Remark: The definition of the reference point follows the
    // specification of the \c BaseMoving message.
    //
    optional Vector3d position = 2;

    // Orientation in the global coordinate system.
    //
    optional Orientation3d orientation = 3;
}

//
// \brief The ActionHeader
//
//
message ActionHeader
{
    // The unique id of the action
    //
    // \note This field is mandatory.
    //
    // \note This id must be unique within all traffic command
    // messages exchanged with one traffic participant.
    //
    optional Identifier action_id = 1;
}

//
// \brief The TrajectoryAction. It provides an interface to describe the motion
// in space as a function of time.
//
// \note The StatePoint requires the timestamp to be set.
//
// \note The StatePoint requires the pose (xyz/rpy) to be set.
//
message TrajectoryAction
{
    // The Action Header
    //
    optional ActionHeader action_header = 1;

    // A list of TrajectoryPoints
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated StatePoint trajectory_point = 2;

    // Constrain the orientation of the traffic participant as specified
    // by the trajectory points
    //
    // This boolean flag defines whether orientation values supplied in 
    // the trajectory points shall be used to constrain the orientation
    // of the traffic participant or not.
    //
    optional bool constrain_orientation = 3;
}

//
// \brief The PathAction. It provides an interface to describe a path.
//
// \note The StatePoint requires the position to be set. The orientation can be
// set optional.
//
// \note All other StatePoint values are ignored.
//
message PathAction
{
    // The Action Header
    //
    optional ActionHeader action_header = 1;

    // A list of PathPoints
    //
    // \note OSI uses singular instead of plural for repeated field names.
    //
    repeated StatePoint path_point = 2;

    // Constrain the orientation of the traffic participant as specified
    // by the path points
    //
    // This boolean flag defines whether orientation values supplied in 
    // the path points shall be used to constrain the orientation
    // of the traffic participant or not.
    //
    optional bool constrain_orientation = 3;
}

//
// \brief Acquire Global Position Action. It provides an interface to describe
// a target pose.
//
message AcquireGlobalPositionAction
{
    // The Action Header
    //
    optional ActionHeader action_header = 1;

    // Position in the global coordinate system.
    //
    // The position refers to the center (x,y,z) of the bounding box.
    //
    // \note Remark: The definition of the reference point follows the
    // specification of the \c BaseMoving message.
    //
    optional Vector3d position = 2;

    // Orientation in the global coordinate system.
    //
    optional Orientation3d orientation = 3;
}

message LaneChangeAction
{
    // The Action Header
    //
    optional ActionHeader action_header = 1;
	
    // Targeted lane relative to the current lane.
    //
    // Convention: +1 means to the right, -1 means to the left.
    //
    optional int32 relative_target_lane = 2;
	
    // Specified shape of the lane change action.
    //
    optional DynamicsShape dynamics_shape = 3;
	
    // Duration of the lane change.
    //
    // Unit: s
    //
    optional double duration = 4; 
	
    // Distance of the lane change.
    //
    // Unit: m
    //
    optional double distance = 5;
    
    // Definition of LaneChange dynamic shapes.
    //
    enum DynamicsShape
    {
        // Shape is unspecified.
        //
        DYNAMICS_SHAPE_UNSPECIFIED = 0;

        // Shape is linear.
        //
        DYNAMICS_SHAPE_LINEAR = 2;

        // Shape is cubic.
        //
        DYNAMICS_SHAPE_CUBIC = 3;

        // Shape is sinusoidal.
        //
        DYNAMICS_SHAPE_SINUSOIDAL = 4;

        // Shape is a step function.
        //
        DYNAMICS_SHAPE_STEP = 5;
    }	
}
